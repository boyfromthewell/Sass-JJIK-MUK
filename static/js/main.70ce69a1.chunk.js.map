{"version":3,"sources":["components/Button.js","App.js","reportWebVitals.js","index.js"],"names":["Button","children","size","color","outline","fullWidth","rest","className","classNames","defaultProps","App","onClick","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sVAMA,SAASA,EAAT,GAAyE,IAAvDC,EAAsD,EAAtDA,SAAUC,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,UAAcC,EAAQ,iBAEtE,OACE,gDACEC,UAAWC,IAAW,SAAUN,EAAMC,EAAO,CAAEC,UAASC,eACpDC,GAFN,aAIGL,KAMPD,EAAOS,aAAe,CACpBP,KAAM,SACNC,MAAO,QAEMH,QCmCAU,MAtDf,WACE,OACE,sBAAKH,UAAU,MAAf,UACE,sBAAKA,UAAU,UAAf,UACE,cAAC,EAAD,CAAQL,KAAK,QAAQS,QAAS,kBAAMC,QAAQC,IAAI,mBAAhD,oBAGA,cAAC,EAAD,qBACA,cAAC,EAAD,CAAQX,KAAK,QAAb,uBAEF,sBAAKK,UAAU,UAAf,UACE,cAAC,EAAD,CAAQL,KAAK,QAAQC,MAAM,OAA3B,oBAGA,cAAC,EAAD,CAAQA,MAAM,OAAd,oBACA,cAAC,EAAD,CAAQD,KAAK,QAAQC,MAAM,OAA3B,uBAIF,sBAAKI,UAAU,UAAf,UACE,cAAC,EAAD,CAAQL,KAAK,QAAQC,MAAM,OAA3B,oBAGA,cAAC,EAAD,CAAQA,MAAM,OAAd,oBACA,cAAC,EAAD,CAAQD,KAAK,QAAQC,MAAM,OAA3B,uBAIF,sBAAKI,UAAU,UAAf,UACE,cAAC,EAAD,CAAQL,KAAK,QAAQC,MAAM,OAAOC,SAAO,EAAzC,oBAGA,cAAC,EAAD,CAAQD,MAAM,OAAOC,SAAO,EAA5B,oBAGA,cAAC,EAAD,CAAQF,KAAK,QAAQC,MAAM,OAAOC,SAAO,EAAzC,uBAIF,sBAAKG,UAAU,UAAf,UACE,cAAC,EAAD,CAAQL,KAAK,QAAQG,WAAS,EAA9B,oBAGA,cAAC,EAAD,CAAQH,KAAK,QAAQG,WAAS,EAACF,MAAM,OAArC,oBAGA,cAAC,EAAD,CAAQD,KAAK,QAAQG,WAAS,EAACF,MAAM,OAArC,2BCtCOW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.70ce69a1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport classNames from \"classnames\";\r\n// classNames 를 사용하면 다음과 같이 조건부 스타일링을 할 때 함수의 인자에\r\n//문자열, 배열, 객체 등을 전달하여 손쉽게 문자열을 조합 할 수 있음\r\nimport \"./Button.scss\";\r\n\r\nfunction Button({ children, size, color, outline, fullWidth, ...rest }) {\r\n  // outline true 일때만 적용\r\n  return (\r\n    <button\r\n      className={classNames(\"Button\", size, color, { outline, fullWidth })}\r\n      {...rest}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n//...rest를 사용해서 우리가 지정한 props 를 제외한 값들을 rest 라는 객체에 모아주고, \r\n//<button> 태그에 {...rest} 를 해주면, rest 안에 있는 객체안에 있는 값들을 모두 <button> 태그에 설정을 해줌\r\nButton.defaultProps = {\r\n  size: \"medium\",\r\n  color: \"blue\",\r\n};\r\nexport default Button;\r\n","import React from \"react\";\nimport \"./App.scss\";\nimport Button from \"./components/Button\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"buttons\">\n        <Button size=\"large\" onClick={() => console.log(\"클릭!!\")}>\n          BUTTON\n        </Button>\n        <Button>BUTTON</Button>\n        <Button size=\"small\">BUTTON</Button>\n      </div>\n      <div className=\"buttons\">\n        <Button size=\"large\" color=\"gray\">\n          BUTTON\n        </Button>\n        <Button color=\"gray\">BUTTON</Button>\n        <Button size=\"small\" color=\"gray\">\n          BUTTON\n        </Button>\n      </div>\n      <div className=\"buttons\">\n        <Button size=\"large\" color=\"pink\">\n          BUTTON\n        </Button>\n        <Button color=\"pink\">BUTTON</Button>\n        <Button size=\"small\" color=\"pink\">\n          BUTTON\n        </Button>\n      </div>\n      <div className=\"buttons\">\n        <Button size=\"large\" color=\"blue\" outline>\n          BUTTON\n        </Button>\n        <Button color=\"gray\" outline>\n          BUTTON\n        </Button>\n        <Button size=\"small\" color=\"pink\" outline>\n          BUTTON\n        </Button>\n      </div>\n      <div className=\"buttons\">\n        <Button size=\"large\" fullWidth>\n          BUTTON\n        </Button>\n        <Button size=\"large\" fullWidth color=\"gray\">\n          BUTTON\n        </Button>\n        <Button size=\"large\" fullWidth color=\"pink\">\n          BUTTON\n        </Button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}